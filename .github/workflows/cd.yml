name: Deploy to EC2

on:
  push:
    branches:
      - main

env:
  BUILD_NUMBER: ${{ github.sha }}-${{ github.run_id }}
  ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

jobs:
  build:
    name : Build Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Github Actions IP
        id: ip
        run: |
          PUBLIC_IP=$(curl -s https://ifconfig.me)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Add Github Actions IP to Security group
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port ${{ secrets.SSH_PORT }} --cidr ${{ env.PUBLIC_IP }}/32

      - name: Docker Hub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/book-management:${{ env.BUILD_NUMBER }}
            ${{ secrets.DOCKER_USERNAME }}/book-management:latest
          cache-from: type=gha
          cache-to: type=gha, mode=max

      - name: Create .env file
        run: |
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env
          echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> .env
          echo "BUILD_NUMBER=${{ env.BUILD_NUMBER }}" >> .env
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> .env
          echo "SPRING_PROFILES_ACTIVE=${{ env.SPRING_PROFILES_ACTIVE }}" >> .env


      - name: Create OpenAPI Documentation
        run: |
          ./gradlew clean openapi3
          mkdir -p docs
          cp build/api-spec/openapi3.yaml docs/

      - name: Transfer files to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: ".env,docker-compose.yml,docs/"
          target: "~/"
          overwrite: true

      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            
            docker-compose down
            docker-compose up -d
            docker-compose ps

      - name: Health Check & Rollback
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            sleep 10
            
            for i in {1..5}; do
              HTTP_STATUS=$(curl -o /dev/null -s -w "%{http_code}\n" http://localhost:8080/health)
              if [ "$HTTP_STATUS" -eq 200 ]; then
                echo "✅ API is healthy!"
                exit 0
              fi
              sleep 5
            done
            
            echo "❌ API health check failed! Rolling back..."
            
            # 가장 최근의 이전 이미지 태그 가져오기
            PREVIOUS_TAG=$(curl -s "https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/book-management/tags" | jq -r '.results | sort_by(.last_updated) | .[-2].name')
            
            if [ -z "$PREVIOUS_TAG" ]; then
              echo "No previous image found! Manual rollback required."
              exit 1
            fi
            
            echo "Rolling back to previous image: $PREVIOUS_TAG"
            docker pull ${{ secrets.DOCKER_USERNAME }}/book-management:$PREVIOUS_TAG
            docker-compose down
            docker run -d --name book-management -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/book-management:$PREVIOUS_TAG
            exit 1
      - name: Remove Github Actions IP From Security Group
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port ${{ secrets.SSH_PORT }} --cidr ${{ env.PUBLIC_IP }}/32
